
Certificate Verification System Implementation Steps:

1. Setup Project Structure:
   - Created a new directory for the project.
   - Initialized a Git repository.
   - Created subdirectories for the backend and frontend.

2. Backend (Node.js & Express.js):
   - Initialized a Node.js project.
   - Installed necessary dependencies (Express, Mongoose, Multer, xlsx, etc.).
   - Set up MongoDB connection using MongoDB Atlas.
   - Created API endpoints for uploading Excel files, retrieving certificate details by ID, and generating downloadable certificates.
   - Implemented data processing and validation.

3. Frontend (React):
   - Initialized a React project.
   - Installed necessary dependencies (Axios, React Router, etc.).
   - Created components for Admin Dashboard, Student Portal, and Certificate Template.
   - Integrated components into the main application and set up routing.

4. Certificate Generation:
   - Integrated jsPDF library to generate and download certificates in PDF format.

5. Validation & Security:
   - Implemented data validation checks.

6. UI Design:
   - Created meaningful UI design for both admin and student interfaces.

7. Documentation:
   - Created a `steps.txt` file containing all the steps done and the optimized code of all files.

8. Upload to GitHub:
   - Pushed the project to the provided GitHub repository.

Optimized Code of All Files:

1. backend/server.js:
---------------------
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
require('dotenv').config();

const app = express();
const port = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(bodyParser.json());

// MongoDB connection
const uri = process.env.MONGO_URI;
mongoose.connect(uri);
const connection = mongoose.connection;
connection.once('open', () => {
  console.log('MongoDB database connection established successfully');
});

// Routes
const certificatesRouter = require('./routes/certificates');
app.use('/api/certificates', certificatesRouter);

// Root endpoint
app.get('/', (req, res) => {
  res.send('Certificate Verification System Backend');
});

app.listen(port, () => {
  console.log(`Server is running on port: ${port}`);
});

2. backend/routes/certificates.js:
----------------------------------
const express = require('express');
const multer = require('multer');
const xlsx = require('xlsx');
const Certificate = require('../models/certificate.model');

const router = express.Router();

// Multer setup for file upload
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// Upload Excel file and process data
router.post('/upload', upload.single('file'), (req, res) => {
  const file = req.file;
  if (!file) {
    return res.status(400).send('No file uploaded.');
  }

  const workbook = xlsx.read(file.buffer, { type: 'buffer' });
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];
  const data = xlsx.utils.sheet_to_json(sheet);

  // Validate and store data in MongoDB
  data.forEach(async (row) => {
    const { certificateID, studentName, internshipDomain, startDate, endDate } = row;
    if (certificateID && studentName && internshipDomain && startDate && endDate) {
      const certificate = new Certificate({
        certificateID,
        studentName,
        internshipDomain,
        startDate,
        endDate,
      });
      await certificate.save();
    }
  });

  res.send('File uploaded and data processed successfully.');
});

// Retrieve certificate details by ID
router.get('/:id', async (req, res) => {
  const certificateID = req.params.id;
  const certificate = await Certificate.findOne({ certificateID });
  if (!certificate) {
    return res.status(404).send('Certificate not found.');
  }
  res.json(certificate);
});

module.exports = router;

3. backend/models/certificate.model.js:
---------------------------------------
const mongoose = require('mongoose');

const Schema = mongoose.Schema;

const certificateSchema = new Schema({
  certificateID: { type: String, required: true, unique: true },
  studentName: { type: String, required: true },
  internshipDomain: { type: String, required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
}, {
  timestamps: true,
});

const Certificate = mongoose.model('Certificate', certificateSchema);

module.exports = Certificate;

4. frontend/src/components/AdminDashboard.js:
---------------------------------------------
import React, { useState } from 'react';
import axios from 'axios';

const AdminDashboard = () => {
  const [file, setFile] = useState(null);
  const [message, setMessage] = useState('');

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
  };

  const handleUpload = async () => {
    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await axios.post('/api/certificates/upload', formData);
      setMessage(response.data);
    } catch (error) {
      setMessage('Error uploading file');
    }
  };

  return (
    <div>
      <h2>Admin Dashboard</h2>
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload</button>
      {message && <p>{message}</p>}
    </div>
  );
};

export default AdminDashboard;

5. frontend/src/components/StudentPortal.js:
--------------------------------------------
import React, { useState } from 'react';
import axios from 'axios';
import CertificateTemplate from './CertificateTemplate';

const StudentPortal = () => {
  const [certificateID, setCertificateID] = useState('');
  const [certificate, setCertificate] = useState(null);
  const [message, setMessage] = useState('');

  const handleSearch = async () => {
    try {
      const response = await axios.get(`/api/certificates/${certificateID}`);
      setCertificate(response.data);
      setMessage('');
    } catch (error) {
      setMessage('Certificate not found');
      setCertificate(null);
    }
  };

  return (
    <div>
      <h2>Student Portal</h2>
      <input
        type="text"
        placeholder="Enter Certificate ID"
        value={certificateID}
        onChange={(e) => setCertificateID(e.target.value)}
      />
      <button onClick={handleSearch}>Search</button>
      {message && <p>{message}</p>}
      {certificate && <CertificateTemplate certificate={certificate} />}
    </div>
  );
};

export default StudentPortal;

6. frontend/src/components/CertificateTemplate.js:
-------------------------------------------------
import React from 'react';
import jsPDF from 'jspdf';

const CertificateTemplate = ({ certificate }) => {
  const { studentName, internshipDomain, startDate, endDate } = certificate;

  const handleDownload = () => {
    const doc = new jsPDF();
    doc.text(`Certificate of Completion`, 20, 20);
    doc.text(`This is to certify that ${studentName}`, 20, 30);
    doc.text(`has successfully completed an internship in ${internshipDomain}`, 20, 40);
    doc.text(`from ${new Date(startDate).toLocaleDateString()} to ${new Date(endDate).toLocaleDateString()}.`, 20, 50);
    doc.save('certificate.pdf');
  };

  return (
    <div>
      <h3>Certificate Details</h3>
      <p>Student Name: {studentName}</p>
      <p>Internship Domain: {internshipDomain}</p>
      <p>Start Date: {new Date(startDate).toLocaleDateString()}</p>
      <p>End Date: {new Date(endDate).toLocaleDateString()}</p>
      <button onClick={handleDownload}>Download Certificate</button>
    </div>
  );
};

export default CertificateTemplate;

7. frontend/src/App.js:
-----------------------
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import AdminDashboard from './components/AdminDashboard';
import StudentPortal from './components/StudentPortal';

const App = () => {
  return (
    <Router>
      <div>
        <Switch>
          <Route path="/admin" component={AdminDashboard} />
          <Route path="/" component={StudentPortal} />
        </Switch>
      </div>
    </Router>
  );
};

export default App;
